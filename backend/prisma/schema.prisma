// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                 @id @unique @default(autoincrement())
  userInformation            UserInformation
  authentication             Authentication
  userContribution           UserContribution
  userTraining               UserTraining
}

model Authentication {
  id                        Int                  @id @unique @default(autoincrement())
  user                      User                 @relation(fields: [userId], references: [id])
  userId                    Int                  @unique
  otpForEmail               String?
  otpEmailExpiry            DateTime?
  otpForExtra               String?
  otpExtraExpiry            DateTime?
  isVerified                Boolean              @default(false)
  isBoarded                 Boolean              @default(false)
}

model UserInformation {
  id                        Int                  @id @unique @default(autoincrement())
  user                      User                 @relation(fields: [userId], references: [id])
  userId                    Int                  @unique 
  email                     String               @unique
  username                  String?              @unique
  name                      String?
  password                  String
  mobileNum                 String?
  role                      Roles                @default(USER)
  profilePic                String?
  gender                    Gender?
  collegeId                 String?
  graduationYear            Int?
  cgpa                      Float?
  college                   String?
  department                Department?
  course                    Course?
  state                     String?
  hosteler                  Boolean?
  leetcodeProfile           String?
  codeforcesProfile         String?
  linkedinProfile           String?
  githubProfile             String?  
}

model UserContribution {
  id                        Int                  @id @unique @default(autoincrement())
  user                      User                 @relation(fields: [userId], references: [id])
  userId                    Int                  @unique
  interview                 Interview
  questions                 Question
  quizes                    Quiz
  articles                  Article
  contributionPoints        Int                   @default(0)
}

model UserTraining {
  id                        Int                   @id @unique @default(autoincrement())
  user                      User                  @relation(fields: [userId], references: [id])
  userId                    Int                   @unique
  interview                 Interview
  quizes                    Quiz
  trainingPoints            Int                   @default(0)
}

model Question {
  id                        Int                   @id @unique @default(autoincrement())
  description               String
  answer                    String?
  creator                   UserContribution      @relation(fields: [createdBy], references: [id])
  createdBy                 Int
  tags                      String[]
  links                     QueAddOnLink[]
  isApproved                Boolean               @default(false)
  isVisibile                Boolean               @default(false)
  upvotes                   Int                   @default(0)
  downvotes                 Int                   @default(0)
}

model QueAddOnLink {
  id                        Int                   @id @unique @default(autoincrement())
  question                  Question              @relation(fields: [questionId], references: [id])
  questionId                Int
  title                     String
  url                       String
}

model Quiz {
  id                        Int                   @id @unique @default(autoincrement())
  creator                   User                  @relation(fields: [createdBy], references: [id])
  createdBy                 Int
  title                     String
  description               String?
  questions                 QuizQuestion[] 
  startTime                 DateTime
  endTime                   DateTime
  isVisibile                Boolean               @default(false)
  attendees                 QuizAttendance[]
}

model QuizAttendance {
  id                        Int                   @id @unique @default(autoincrement())
  quiz                      Quiz                  @relation(fields: [quizId], references: [id])
  quizId                    Int
  attendee                  User                  @relation(fields: [userId], references: [id])
  userId                    Int
  score                     Int
}

model QuizQuestion {
  id                        Int                   @id @unique @default(autoincrement())
  quiz                      Quiz                  @relation(fields: [quizId], references: [id])
  quizId                    Int
  description               String
  options                   String[]
  correctOption             Int  
}

model Article {
  id                        Int                   @id @unique @default(autoincrement())
  creator                   User                  @relation(fields: [createdBy], references: [id])
  createdBy                 Int
  title                     String
  description               String
  isApproved                Boolean               @default(false)
  isVisibile                Boolean               @default(false)
}

model Interview {
  id                        Int                   @id @unique @default(autoincrement())
  interviewer               UserContribution      @relation(fields: [interviewerId], references: [id])
  interviewee               UserInformation       @relation(fields: [intervieweeId], references: [id])
  interviewerId             Int
  intervieweeId             Int
  startTime                 DateTime
  duration                  Int 
  topics                    String[]
  isCompleted               Boolean               @default(false)
  feedback                  Feedback
}

model Feedback {
  id                        Int                   @id @unique @default(autoincrement())
  interview                 Interview             @relation(fields: [interviewId], references: [id])
  interviewId               Int                   @unique
  communication             Int                   @default(0)
  development               Int                   @default(0)
  dsa                       Int                   @default(0)
  csfundamentals            Int                   @default(0)
  notes                     String[]
  points                    Int                   @default(0)
}

enum Roles {
  USER
  ADMIN
  SUPERADMIN
  MANAGER
}

enum Gender {
  MALE
  FEMALE
  TRANSGENDER
  PREFER_NOT_TO_SAY
}

enum Department {
  COMPUTER_SCIENCE_AND_ENGINEERING
  ELECTRONICS_AND_INSTRUMENTATION_ENGINEERING
  ELECTRONICS_AND_COMMUNICATIONS_ENGINEERING
  ELECTRICAL_ENGINEERING
  MECHANICAL_ENGINEERING
  CHEMICAL_ENGINEERING
  CIVIL_ENGINEERING
  PRODUCTION_ENGINEERING
  BIO_TECH_AND_BIO_ENGINEERING
}

enum Course {
  BTech
  PhD
  MCA
  MTech
}